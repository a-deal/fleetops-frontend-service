#!/usr/bin/env node
/**
 * Generate PWA Version
 * 
 * Creates a dynamic version string for cache busting based on:
 * - Git commit hash (if available)
 * - Build timestamp
 * - Package version
 * 
 * This ensures proper cache invalidation between deployments
 * and fixes issues where regular Chrome uses stale cached assets.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Get git commit hash (first 7 chars) if available
let gitHash = 'nogit';
try {
  gitHash = execSync('git rev-parse --short HEAD', { encoding: 'utf-8' }).trim();
} catch (e) {
  // Not a git repo or git not available
}

// Get package version
const packageJson = require('../package.json');
const packageVersion = packageJson.version || '0.0.0';

// Generate timestamp (YYYYMMDDHHmmss)
const now = new Date();
const timestamp = now.toISOString()
  .replace(/[-:]/g, '')
  .replace('T', '')
  .split('.')[0];

// Combine into version string
const pwaVersion = `${packageVersion}-${gitHash}-${timestamp}`;

// Generate the constants file
const constantsContent = `/**
 * PWA Constants - AUTO-GENERATED FILE
 * 
 * This file is automatically generated at build time.
 * DO NOT EDIT MANUALLY - changes will be overwritten.
 * 
 * Generated at: ${now.toISOString()}
 * Version: ${pwaVersion}
 */

// Dynamic version for cache busting - changes with every build
export const PWA_VERSION = '${pwaVersion}';

// Cache names with versioning strategy
export const CACHE_NAMES = {
  // Versioned caches - will be cleared on version change
  precache: \`fleetops-precache-v\${PWA_VERSION}\`,  // App shell (HTML, CSS, JS)
  runtime: \`fleetops-runtime-v\${PWA_VERSION}\`,    // API responses, dynamic content
  
  // Data caches - persist across versions (critical for field operations)
  equipment: 'fleetops-equipment-v1',  // Equipment specs, manuals, procedures
  telemetry: 'fleetops-telemetry-v1',  // Last 24hr sensor readings
} as const;

// Service Worker behavior configuration
export const PWA_CONFIG = {
  // Immediately activate new service worker
  // RATIONALE: Safety updates must apply without waiting
  skipWaiting: true,
  
  // Take control of all pages immediately
  // RATIONALE: Consistent experience across all tabs
  clientsClaim: true,
  
  // Reload pages when coming back online
  // RATIONALE: Ensure fresh telemetry data after offline period
  reloadOnOnline: true,
} as const;

// Build metadata for debugging
export const PWA_BUILD_INFO = {
  version: '${pwaVersion}',
  packageVersion: '${packageVersion}',
  gitHash: '${gitHash}',
  timestamp: '${timestamp}',
  buildDate: '${now.toISOString()}',
} as const;
`;

// Write the file
const outputPath = path.join(__dirname, '..', 'lib', 'pwa', 'constants.ts');
fs.writeFileSync(outputPath, constantsContent);

console.log(`‚úÖ Generated PWA version: ${pwaVersion}`);
console.log(`üìù Written to: ${outputPath}`);